----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 21.12.2020 19:09:17
-- Design Name: 
-- Module Name: controll_memory - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity controll_memory is
    Port ( IN_CAR : in STD_LOGIC_VECTOR (16 downto 0);
           flag_reset : out STD_LOGIC_VECTOR (4 downto 0);
           memory_c : out STD_LOGIC_VECTOR (1 downto 0);
           controll_base : out STD_LOGIC_VECTOR (10 downto 0);
           PC_c : out STD_LOGIC_VECTOR (1 downto 0);
           IL : out STD_LOGIC;
           MC : out STD_LOGIC;
           MS : out STD_LOGIC_VECTOR (2 downto 0);
           alt_address : out STD_LOGIC_VECTOR (16 downto 0));
end controll_memory;

architecture Behavioral of controll_memory is

type mem_array is array(0 to 255) of std_logic_vector(41 downto 0);
begin
memory_m: process(IN_CAR)
variable control_mem : mem_array:=(
     --avalable for setup
   --|    J   |   C  | S|MIPPTTTM| F |MRMMRRRRF
   --|    J   |   A  | M|CLILDABB| S |DWMWVCNFL
    "000000000000000000011110000000000001000000",--(00000000) idle
    "000000000000000000000000000000000000000000",--(00000001) 
    "000000000000000000000000000000000000000000",--(00000010) 
    "000000000000000000000000000000000000000000",--(00000011)
    
    --basic operations
   --|    J   |   C  | S|MIPPTTTM| F |MRMMRRRRF
   --|    J   |   A  | M|CLILDABB| S |DWMWVCNFL
    "000000000000000000011110000000000011000000",--(00000100) mov--used
    "000000000000000000010011000000000110000000",--(00000101) ldr--used
    "000000000000000000010011000000000000100000",--(00000110) str--used
    "000000000000000000011110000000010011000001",--(00000111) add--used
    "000000000000000000011110000000101011000001",--(00001000) sub
    "000000000000000000011110000001110011000000",--(00001001) not--used, makes comp
    "000000000000000000011110000001000011000000",--(00001010) and
    "000000000000000000011110000001010011000000",--(00001011) orr
    "000000000000000000011110000001100011000000",--(00001100) xor
    "000000000000000000011110000000001011000001",--(00001101) inc
    "000000000000000000011110000000110011000001",--(00001110) dec
    --immediate operations
   --|    J   |   C  | S|MIPPTTTM| F |MRMMRRRRF
   --|    J   |   A  | M|CLILDABB| S |DWMWVCNFL
    "000000000000000000011110000110000011000000",--(00001111) mov_i --used
    "000000000000000000011110000100010011000001",--(00010000) add_i --used
    "000000000000000000011110000100101011000001",--(00010001) sub_i
    "000000000000000000011110000101000011000000",--(00010010) and_i
    "000000000000000000011110000101010011000000",--(00010011) orr_i
    "000000000000000000011110000101100011000000",--(00010100) xor_i
    --branches
   --|    J   |   C  | S|MIPPTTTM| F |MRMMRRRRF
   --|    J   |   A  | M|CLILDABB| S |DWMWVCNFL
    "000000000000000000011101000000000001000000",--(00010101) bal #un-conditional --used
    --complex branches
   --|    J   |   C  | S|MIPPTTTM| F |MRMMRRRRF
   --|    J   |   A  | M|CLILDABB| S |DWMWVCNFL
    "000000000000101011110011000000000000000000",--(00010110) beq #if(z==1) -> unconditional --used
    "000000000000000000011110000000000001000000",--(00010111) beq #else idle --used
    "000000000000101011000011000000000000000000",--(00011000) bne #if(z==0) -> unconditional
    "000000000000000000011110000000000001000000",--(00011001) bne #else idle
    "000000000000101011100011000000000000000000",--(00011010) bcs #if(c==1) -> unconditional
    "000000000000000000011110000000000001000000",--(00011011) bcs #else idle
    "000000000000101010100011000000000000000000",--(00011100) bcc #if(c==0) -> unconditional
    "000000000000000000011110000000000001000000",--(00011101) bcc #else idle
    "000000000000000001010011000000000000000000",--(00011110) bmi #if(n==1) -> idle //(n!=1)act
    "000000000000000000011101000000000001000000",--(00011111) bmi #else act
    "000000000000101011010011000000000000000000",--(00100000) bpl #if(n==1) -> unconditional
    "000000000000000000011110000000000001000000",--(00100001) bpl #else idle
    "000000000000000000110011000000000000000000",--(00100010) bvs #if(v==1) -> idle //(v!=1)act
    "000000000000000000011101000000000001000000",--(00100011) bvs #else act
    "000000000000101010110011000000000000000000",--(00100100) bvc #if(v==1) -> unconditional
    "000000000000000000011110000000000001000000",--(00100101) bvc #else idle
    --more complex branch
    "000000000000000000000000000000000000000000",--(00100110) bhi #c==0 && z==0
    "000000000000000000010001000000000000000000",--(00100111) bhi #act
    "000000000000000000000000000000000000000000",--(00101000) bls #c==0 || z==1
    "000000000000000000010001000000000000000000",--(00101001) bls #act
    "000000000000000000000000000000000000000000",--(00101010) bge #n==v
    "000000000000000000010001000000000000000000",--(00101011) bge #act
    "000000000000000000000000000000000000000000",--(00101100) blt #n!=v
    "000000000000000000010001000000000000000000",--(00101101) blt #act
    "000000000000000000000000000000000000000000",--(00101110) bgt #z==0 && n==v
    "000000000000000000010001000000000000000000",--(00101111) bgt #act
    "000000000000000000000000000000000000000000",--(00110000) ble #z==1 || n!=v
    "000000000000000000010001000000000000000000",--(00110001) ble #act
    --barrol shifter and multiple target's might be nice
    --complex operations
   --|    J   |   C  | S|MIPPTTTM| F |MRMMRRRRF
   --|    J   |   A  | M|CLILDABB| S |DWMWVCNFL
    "000000000010000000000010000000000000000001",--(00110010) mul
    "000000000010000000000000000000000000000000",--(00110011) div
    "000000000010000000010011100000000010011111",--(00110100) lsl<n>
    "000000000010000110010011100000000010011111",--(00110101) lsr<n>
    "000000000010001100010011100000000010011111",--(00110110) asl<n>
    "000000000010010010010011100000000010011111",--(00110111) asr<n>
    --dont work for ovious reasons O.o
    "000000000010000000010011100110000010011111",--(00111000) lsl<i> --used
    "000000000010000110010011100110000010011111",--(00111001) lsr<i> --used
    "000000000010001100010011100110000010011111",--(00111010) asl<i>
    "000000000010010010010011100110000010011111",--(00111011) asr<i>
    "000000000010000000000000000000000000000000",--(00111100)
    "000000000010000000000000000000000000000000",--(00111101)
    "000000000010000000000000000000000000000000",--(00111110)
    "000000000010000000000000000000000000000000",--(00111111)
    --further stares. leaves space for 64+128 instructions //should reallocate
    --lsl<n>
   --|    J   |   C  | S|MIPPTTTM| F |MRMMRRRRF
   --|    J   |   A  | M|CLILDABB| S |DWMWVCNFL
    "000000000000000000000011110000110010000001",--(01000000) -- dec temp
    "000000000000000001010011000000000000000000",--(01000001) -- if neg, idle
    "000000000010000000010011000011000010000000",--(01000010) -- lsl act, stem back
    --lsr<n> 
   --|    J   |   C  | S|MIPPTTTM| F |MRMMRRRRF
   --|    J   |   A  | M|CLILDABB| S |DWMWVCNFL
    "000000000000000000000011110000110010000001",--(01000011) -- dec temp
    "000000000000000001010011000000000000000000",--(01000100) -- if neg, idle
    "000000000010000110010011000010100010000000",--(01000101) -- lsr act, stem back
    --asl<n> -- not functional- impliments lsl
   --|    J   |   C  | S|MIPPTTTM| F |MRMMRRRRF
   --|    J   |   A  | M|CLILDABB| S |DWMWVCNFL
    "000000000000000000000011110000110010000001",--(01000110)
    "000000000000000001010011000000000000000000",--(01000111)
    "000000000010000110010011000011000010000000",--(01001000)
    --asr<n> -- not functional- impliments lsr
   --|    J   |   C  | S|MIPPTTTM| F |MRMMRRRRF
   --|    J   |   A  | M|CLILDABB| S |DWMWVCNFL
    "000000000000000000000011110000110010000001",--(01001001)
    "000000000000000001010011000000000000000000",--(01001010)
    "000000000010000110010011000010100010000000",--(01001011)
   --|    J   |   C  | S|MIPPTTTM| F |MRMMRRRRF
   --|    J   |   A  | M|CLILDABB| S |DWMWVCNFL
    "000000000000000000000000000000000000000000",--(01001100)
    "000000000000000000000000000000000000000000",--(01001101)
    "000000000000000000000000000000000000000000",--(01001110)
    "000000000000000000000000000000000000000000",--(01001111)
    "000000000000000000000000000000000000000000",--(01010000)
    "000000000000000000000000000000000000000000",--(01010001)
    "000000000000000000000000000000000000000000",--(01010010)
    "000000000000000000000000000000000000000000",--(01010011)
    "000000000000000000000000000000000000000000",--(01010100)
    "000000000000000000000000000000000000000000",--(01010101)
    "000000000000000000000000000000000000000000",--(01010110)
    "000000000000000000000000000000000000000000",--(01010111)
    "000000000000000000000000000000000000000000",--(01011000)
    "000000000000000000000000000000000000000000",--(01011001)
    "000000000000000000000000000000000000000000",--(01011010)
    "000000000000000000000000000000000000000000",--(01011011)
    "000000000000000000000000000000000000000000",--(01011100)
    "000000000000000000000000000000000000000000",--(01011101)
    "000000000000000000000000000000000000000000",--(01011110)
    "000000000000000000000000000000000000000000",--(01011111)
    "000000000000000000000000000000000000000000",--(01100000)
    "000000000000000000000000000000000000000000",--(01100001)
    "000000000000000000000000000000000000000000",--(01100010)
    "000000000000000000000000000000000000000000",--(01100011)
    "000000000000000000000000000000000000000000",--(01100100)
    "000000000000000000000000000000000000000000",--(01100101)
    "000000000000000000000000000000000000000000",--(01100110)
    "000000000000000000000000000000000000000000",--(01100111)
    "000000000000000000000000000000000000000000",--(01101000)
    "000000000000000000000000000000000000000000",--(01101001)
    "000000000000000000000000000000000000000000",--(01101010)
    "000000000000000000000000000000000000000000",--(01101011)
    "000000000000000000000000000000000000000000",--(01101100)
    "000000000000000000000000000000000000000000",--(01101101)
    "000000000000000000000000000000000000000000",--(01101110)
    "000000000000000000000000000000000000000000",--(01101111)
    "000000000000000000000000000000000000000000",--(01110000)
    "000000000000000000000000000000000000000000",--(01110001)
    "000000000000000000000000000000000000000000",--(01110010)
    "000000000000000000000000000000000000000000",--(01110011)
    "000000000000000000000000000000000000000000",--(01110100)
    "000000000000000000000000000000000000000000",--(01110101)
    "000000000000000000000000000000000000000000",--(01110110)
    "000000000000000000000000000000000000000000",--(01110111)
    "000000000000000000000000000000000000000000",--(01111000)
    "000000000000000000000000000000000000000000",--(01111001)
    "000000000000000000000000000000000000000000",--(01111010)
    "000000000000000000000000000000000000000000",--(01111011)
    "000000000000000000000000000000000000000000",--(01111100)
    "000000000000000000000000000000000000000000",--(01111101)
    "000000000000000000000000000000000000000000",--(01111110)
    "000000000000000000000000000000000000000000",--(01111111)
    "000000000000000000000000000000000000000000",--(10000000)
    "000000000000000000000000000000000000000000",--(10000001)
    "000000000000000000000000000000000000000000",--(10000010)
    "000000000000000000000000000000000000000000",--(10000011)
    "000000000000000000000000000000000000000000",--(10000100)
    "000000000000000000000000000000000000000000",--(10000101)
    "000000000000000000000000000000000000000000",--(10000110)
    "000000000000000000000000000000000000000000",--(10000111)
    "000000000000000000000000000000000000000000",--(10001000)
    "000000000000000000000000000000000000000000",--(10001001)
    "000000000000000000000000000000000000000000",--(10001010)
    "000000000000000000000000000000000000000000",--(10001011)
    "000000000000000000000000000000000000000000",--(10001100)
    "000000000000000000000000000000000000000000",--(10001101)
    "000000000000000000000000000000000000000000",--(10001110)
    "000000000000000000000000000000000000000000",--(10001111)
    "000000000000000000000000000000000000000000",--(10010000)
    "000000000000000000000000000000000000000000",--(10010001)
    "000000000000000000000000000000000000000000",--(10010010)
    "000000000000000000000000000000000000000000",--(10010011)
    "000000000000000000000000000000000000000000",--(10010100)
    "000000000000000000000000000000000000000000",--(10010101)
    "000000000000000000000000000000000000000000",--(10010110)
    "000000000000000000000000000000000000000000",--(10010111)
    "000000000000000000000000000000000000000000",--(10011000)
    "000000000000000000000000000000000000000000",--(10011001)
    "000000000000000000000000000000000000000000",--(10011010)
    "000000000000000000000000000000000000000000",--(10011011)
    "000000000000000000000000000000000000000000",--(10011100)
    "000000000000000000000000000000000000000000",--(10011101)
    "000000000000000000000000000000000000000000",--(10011110)
    "000000000000000000000000000000000000000000",--(10011111)
    "000000000000000000000000000000000000000000",--(10100000)
    "000000000000000000000000000000000000000000",--(10100001)
    "000000000000000000000000000000000000000000",--(10100010)
    "000000000000000000000000000000000000000000",--(10100011)
    "000000000000000000000000000000000000000000",--(10100100)
    "000000000000000000000000000000000000000000",--(10100101)
    "000000000000000000000000000000000000000000",--(10100110)
    "000000000000000000000000000000000000000000",--(10100111)
    "000000000000000000000000000000000000000000",--(10101000)
    "000000000000000000000000000000000000000000",--(10101001)
    "000000000000000000000000000000000000000000",--(10101010)
    "000000000000000000000000000000000000000000",--(10101011)
    "000000000000000000000000000000000000000000",--(10101100)
    "000000000000000000000000000000000000000000",--(10101101)
    "000000000000000000000000000000000000000000",--(10101110)
    "000000000000000000000000000000000000000000",--(10101111)
    "000000000000000000000000000000000000000000",--(10110000)
    "000000000000000000000000000000000000000000",--(10110001)
    "000000000000000000000000000000000000000000",--(10110010)
    "000000000000000000000000000000000000000000",--(10110011)
    "000000000000000000000000000000000000000000",--(10110100)
    "000000000000000000000000000000000000000000",--(10110101)
    "000000000000000000000000000000000000000000",--(10110110)
    "000000000000000000000000000000000000000000",--(10110111)
    "000000000000000000000000000000000000000000",--(10111000)
    "000000000000000000000000000000000000000000",--(10111001)
    "000000000000000000000000000000000000000000",--(10111010)
    "000000000000000000000000000000000000000000",--(10111011)
    "000000000000000000000000000000000000000000",--(10111100)
    "000000000000000000000000000000000000000000",--(10111101)
    "000000000000000000000000000000000000000000",--(10111110)
    "000000000000000000000000000000000000000000",--(10111111)
    "000000000000000000000000000000000000000000",--(11000000)
    "000000000000000000000000000000000000000000",--(11000001)
    "000000000000000000000000000000000000000000",--(11000010)
    "000000000000000000000000000000000000000000",--(11000011)
    "000000000000000000000000000000000000000000",--(11000100)
    "000000000000000000000000000000000000000000",--(11000101)
    "000000000000000000000000000000000000000000",--(11000110)
    "000000000000000000000000000000000000000000",--(11000111)
    "000000000000000000000000000000000000000000",--(11001000)
    "000000000000000000000000000000000000000000",--(11001001)
    "000000000000000000000000000000000000000000",--(11001010)
    "000000000000000000000000000000000000000000",--(11001011)
    "000000000000000000000000000000000000000000",--(11001100)
    "000000000000000000000000000000000000000000",--(11001101)
    "000000000000000000000000000000000000000000",--(11001110)
    "000000000000000000000000000000000000000000",--(11001111)
    "000000000000000000000000000000000000000000",--(11010000)
    "000000000000000000000000000000000000000000",--(11010001)
    "000000000000000000000000000000000000000000",--(11010010)
    "000000000000000000000000000000000000000000",--(11010011)
    "000000000000000000000000000000000000000000",--(11010100)
    "000000000000000000000000000000000000000000",--(11010101)
    "000000000000000000000000000000000000000000",--(11010110)
    "000000000000000000000000000000000000000000",--(11010111)
    "000000000000000000000000000000000000000000",--(11011000)
    "000000000000000000000000000000000000000000",--(11011001)
    "000000000000000000000000000000000000000000",--(11011010)
    "000000000000000000000000000000000000000000",--(11011011)
    "000000000000000000000000000000000000000000",--(11011100)
    "000000000000000000000000000000000000000000",--(11011101)
    "000000000000000000000000000000000000000000",--(11011110)
    "000000000000000000000000000000000000000000",--(11011111)
    "000000000000000000000000000000000000000000",--(11100000)
    "000000000000000000000000000000000000000000",--(11100001)
    "000000000000000000000000000000000000000000",--(11100010)
    "000000000000000000000000000000000000000000",--(11100011)
    "000000000000000000000000000000000000000000",--(11100100)
    "000000000000000000000000000000000000000000",--(11100101)
    "000000000000000000000000000000000000000000",--(11100110)
    "000000000000000000000000000000000000000000",--(11100111)
    "000000000000000000000000000000000000000000",--(11101000)
    "000000000000000000000000000000000000000000",--(11101001)
    "000000000000000000000000000000000000000000",--(11101010)
    "000000000000000000000000000000000000000000",--(11101011)
    "000000000000000000000000000000000000000000",--(11101100)
    "000000000000000000000000000000000000000000",--(11101101)
    "000000000000000000000000000000000000000000",--(11101110)
    "000000000000000000000000000000000000000000",--(11101111)
    "000000000000000000000000000000000000000000",--(11110000)
    "000000000000000000000000000000000000000000",--(11110001)
    "000000000000000000000000000000000000000000",--(11110010)
    "000000000000000000000000000000000000000000",--(11110011)
    "000000000000000000000000000000000000000000",--(11110100)
    "000000000000000000000000000000000000000000",--(11110101)
    "000000000000000000000000000000000000000000",--(11110110)
    "000000000000000000000000000000000000000000",--(11110111)
    "000000000000000000000000000000000000000000",--(11111000)
    "000000000000000000000000000000000000000000",--(11111001)
    "000000000000000000000000000000000000000000",--(11111010)
    "000000000000000000000000000000000000000000",--(11111011)
    "000000000000000000000000000000000000000000",--(11111100)
    "000000000000000000000000000000000000000000",--(11111101)
    "000000000000000000000000000000000000000000",--(11111110)
    "000000000000000000000000000000000000000000" --(11111111)
    );
variable addr : integer;
variable control_out : std_logic_vector(41 downto 0);

    begin
        addr := conv_integer(IN_CAR);
        control_out := control_mem(addr);
        flag_reset <= control_out(4 downto 0);
        memory_c <= control_out(6 downto 5);
        controll_base <= control_out(17 downto 7);
        PC_c <= control_out(19 downto 18);
        IL <= control_out(20);
        MC <= control_out(21);
        MS <= control_out(24 downto 22);
        alt_address <= control_out(41 downto 25);
    end process;
end Behavioral;